/**
 * This class is generated by jOOQ
 */
package com.lanzonprojects.omsapi.jooq.generated.tables;


import com.lanzonprojects.omsapi.jooq.generated.Keys;
import com.lanzonprojects.omsapi.jooq.generated.Notemaker;
import com.lanzonprojects.omsapi.jooq.generated.tables.records.NoteAuthorRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.3"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NoteAuthor extends TableImpl<NoteAuthorRecord> {

	private static final long serialVersionUID = -1538528543;

	/**
	 * The reference instance of <code>notemaker.note_author</code>
	 */
	public static final NoteAuthor NOTE_AUTHOR = new NoteAuthor();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<NoteAuthorRecord> getRecordType() {
		return NoteAuthorRecord.class;
	}

	/**
	 * The column <code>notemaker.note_author.note_id</code>.
	 */
	public final TableField<NoteAuthorRecord, Integer> NOTE_ID = createField("note_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>notemaker.note_author.author_id</code>.
	 */
	public final TableField<NoteAuthorRecord, Integer> AUTHOR_ID = createField("author_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * Create a <code>notemaker.note_author</code> table reference
	 */
	public NoteAuthor() {
		this("note_author", null);
	}

	/**
	 * Create an aliased <code>notemaker.note_author</code> table reference
	 */
	public NoteAuthor(String alias) {
		this(alias, NOTE_AUTHOR);
	}

	private NoteAuthor(String alias, Table<NoteAuthorRecord> aliased) {
		this(alias, aliased, null);
	}

	private NoteAuthor(String alias, Table<NoteAuthorRecord> aliased, Field<?>[] parameters) {
		super(alias, Notemaker.NOTEMAKER, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<NoteAuthorRecord> getPrimaryKey() {
		return Keys.KEY_NOTE_AUTHOR_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<NoteAuthorRecord>> getKeys() {
		return Arrays.<UniqueKey<NoteAuthorRecord>>asList(Keys.KEY_NOTE_AUTHOR_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<NoteAuthorRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<NoteAuthorRecord, ?>>asList(Keys.FK_NOTE_AUTHOR_NOTE, Keys.FK_NOTE_AUTHOR_AUTHOR);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public NoteAuthor as(String alias) {
		return new NoteAuthor(alias, this);
	}

	/**
	 * Rename this table
	 */
	public NoteAuthor rename(String name) {
		return new NoteAuthor(name, null);
	}
}
