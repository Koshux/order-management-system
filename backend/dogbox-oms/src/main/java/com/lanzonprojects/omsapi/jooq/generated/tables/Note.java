/**
 * This class is generated by jOOQ
 */
package com.lanzonprojects.omsapi.jooq.generated.tables;


import com.lanzonprojects.omsapi.jooq.generated.Keys;
import com.lanzonprojects.omsapi.jooq.generated.Notemaker;
import com.lanzonprojects.omsapi.jooq.generated.tables.records.NoteRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.3"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Note extends TableImpl<NoteRecord> {

	private static final long serialVersionUID = 2015657654;

	/**
	 * The reference instance of <code>notemaker.note</code>
	 */
	public static final Note NOTE = new Note();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<NoteRecord> getRecordType() {
		return NoteRecord.class;
	}

	/**
	 * The column <code>notemaker.note.id</code>.
	 */
	public final TableField<NoteRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>notemaker.note.title</code>.
	 */
	public final TableField<NoteRecord, String> TITLE = createField("title", org.jooq.impl.SQLDataType.VARCHAR.length(20).nullable(false), this, "");

	/**
	 * The column <code>notemaker.note.description</code>.
	 */
	public final TableField<NoteRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.VARCHAR.length(100).nullable(false), this, "");

	/**
	 * The column <code>notemaker.note.creation_date</code>.
	 */
	public final TableField<NoteRecord, Timestamp> CREATION_DATE = createField("creation_date", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

	/**
	 * Create a <code>notemaker.note</code> table reference
	 */
	public Note() {
		this("note", null);
	}

	/**
	 * Create an aliased <code>notemaker.note</code> table reference
	 */
	public Note(String alias) {
		this(alias, NOTE);
	}

	private Note(String alias, Table<NoteRecord> aliased) {
		this(alias, aliased, null);
	}

	private Note(String alias, Table<NoteRecord> aliased, Field<?>[] parameters) {
		super(alias, Notemaker.NOTEMAKER, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<NoteRecord> getPrimaryKey() {
		return Keys.KEY_NOTE_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<NoteRecord>> getKeys() {
		return Arrays.<UniqueKey<NoteRecord>>asList(Keys.KEY_NOTE_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Note as(String alias) {
		return new Note(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Note rename(String name) {
		return new Note(name, null);
	}
}
